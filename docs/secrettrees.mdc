---
description:
globs:
alwaysApply: false
---
# SecretTrees Project Development Guidelines

## Core Development Principles

1. **System-First Approach**
   - Identify existing systems before creating new ones
   - Leverage established patterns and templates
   - Extend rather than duplicate functionality

2. **Organized Development Flow**
   - Follow the task lifecycle defined in TaskTrackingSystem.md
   - Use the weekly planning template for consistent scheduling
   - Reference the consolidated task backlog for prioritization

3. **Integration-Focused Development**
   - Ensure n8n workflows connect properly with the main Secret Trees systems
   - Maintain clean boundaries between system components
   - Document integration points between subsystems

## Project Structure Guidelines

### Main Project Structure
```
Secret_Trees/
├── docs/                    # Documentation and knowledge base
│   ├── markdown/            # Markdown-based documentation
│   │   ├── tasks-backlog.md # Consolidated task list
│   │   └── ...              # Other documentation files
│   └── Team/                # Team-oriented documentation
├── tasks/                   # Task workspace for in-progress work
│   └── [task-name]/         # Organized by specific task
├── src/                     # Source code for main applications
└── assets/                  # Project assets and resources
```

### Workflow Project Structure
```
secret-trees-n8n-workflows/
├── core/                    # Core functionality
├── workflows/               # Workflow definitions
├── config/                  # Configuration files
├── scripts/                 # Utility scripts
├── tests/                   # Test scripts
└── docs/                    # Project documentation
```

## Development Workflow

1. **Task Selection & Planning**
   - Reference the tasks-backlog.md for prioritized tasks
   - Add task to DEVELOPMENT-TRACKING.md when starting work
   - Create task workspace in /tasks/[task-name]/ if needed

2. **Development Process**
   - Follow guidelines in DEVELOPMENT-WORKFLOW.md
   - Use appropriate directories based on project structure
   - Run cleanup script periodically to maintain organization

3. **Testing & Validation**
   - Execute relevant test scripts before completing tasks
   - Document test results in task notes
   - Follow test-tracking.md guidelines for test management

4. **Completion & Integration**
   - Update task status in tasks-backlog.md
   - Move completed code from task workspace to proper location
   - Document integration points

## System Maintenance

1. **File Organization**
   - Keep root directories clean
   - Use cleanup scripts to maintain structure
   - Archive obsolete files rather than deleting

2. **Documentation Updates**
   - Keep README files current
   - Update workflow documentation when changes are made
   - Maintain accurate task status

3. **Knowledge Sharing**
   - Document decisions and rationales
   - Update shared knowledge resources
   - Cross-reference related documentation

## Specific Project Areas

### n8n Workflows
- Prefer existing workflows when possible
- Store all production workflows in the /workflows directory
- Test thoroughly before deployment

### Telegram Integration
- Follow security guidelines in TELEGRAM-BOT-SETUP.md
- Maintain clean separation between user interfaces
- Document all user-facing commands

### Obsidian Knowledge Base
- Follow the established vault structure
- Use consistent tagging for searchability
- Link related documents properly

## Emergency Recovery Procedures

If you're unsure about project structure or status:

1. Check tasks-backlog.md for current priorities
2. Review DEVELOPMENT-TRACKING.md for active work
3. Run the cleanup script to reorganize files
4. Reference PROJECT-STRUCTURE.md for organization principles

## Reporting and Progress Tracking

### Regular Status Updates
1. **Daily Updates**
   - Update task status through the tracking API
   - Document blockers immediately with #blocker tag
   - Commit all changes to in-progress tasks

2. **Weekly Reports**
   - Generate via `/scripts/task report weekly`
   - Review all team member contributions
   - Update progress metrics in dashboard

3. **Monthly Reviews**
   - Run `/scripts/task report monthly` to generate consolidated view
   - Update project roadmap based on progress
   - Archive completed tasks and update backlog

### Metric Collection
1. **Development Metrics**
   - Track task completion rate
   - Monitor code quality via static analysis
   - Record time-to-completion for tasks

2. **System Metrics**
   - Log API response times
   - Monitor workflow execution success rates
   - Track resource utilization

3. **User Engagement**
   - Measure Telegram bot interactions
   - Track knowledge base access patterns
   - Monitor feature utilization

### Reporting Commands
```bash
# Generate daily status report
./scripts/task report daily

# Generate weekly summary
./scripts/task report weekly

# View metrics for a specific component
./scripts/task metrics [component-name]

# Update dashboard with latest metrics
./scripts/update-dashboard

# Generate stakeholder report
./scripts/task report external
```

## Telegram Integration Guidelines

### Bot Command Structure
1. **Command Categories**
   - Knowledge: `/know`, `/search`, `/find`
   - Tasks: `/task`, `/todo`, `/done`
   - System: `/status`, `/help`, `/settings`
   - Admin: `/admin`, `/config`, `/restart`

2. **Command Conventions**
   - Use kebab-case for multi-word commands
   - Include help text for all commands
   - Group related commands with command categories

3. **Security Levels**
   - Public: Available to all users
   - Member: Requires team membership
   - Admin: Requires administrative access
   - System: Reserved for system operations

### Bot Development Workflow
1. **Command Implementation**
   - Add command definition to `bot-config.json`
   - Implement handler in `telegram-bot.js`
   - Write tests in `tests/test-telegram-bot.sh`

2. **Testing Process**
   - Test with the staging bot first
   - Verify all security checks function properly
   - Ensure proper error handling and feedback

3. **Deployment**
   - Update command list with BotFather
   - Deploy to production after testing
   - Announce new commands to team

### Integration Points
1. **n8n Connections**
   - Webhook endpoints for receiving messages
   - Processing workflows for handling commands
   - Notification workflows for alerts

2. **Obsidian Integration**
   - Knowledge queries route to Obsidian vault
   - Task updates reflect in task documents
   - Status reports generate from Obsidian data

## Obsidian Routing and Structure

### Vault Organization
1. **Primary Sections**
   - Daily Notes: `/Daily-Notes/YYYY-MM-DD/`
   - Knowledge Base: `/Knowledge/`
   - Projects: `/Projects/`
   - Tasks: `/Tasks/`
   - Team: `/Team/`

2. **File Naming Conventions**
   - Use YYYY-MM-DD prefix for dated files
   - Use PascalCase for concept and entity pages
   - Use kebab-case for structural and template files

3. **Linking Conventions**
   - Use descriptive link text rather than raw URLs
   - Create bidirectional links for related concepts
   - Use embeds sparingly and with purpose

### Integration Paths
1. **API Routes**
   - GET `/api/knowledge/{concept}` - Retrieve knowledge
   - POST `/api/tasks/update` - Update task status
   - GET `/api/daily-notes/{date}` - Get daily notes

2. **Query Syntax**
   - Tag-based: `#project #status:active`
   - Full-text: `"carbon sequestration"`
   - Metadata: `created:>2025-04-01`

3. **Update Patterns**
   - Direct file modification via API
   - Template-based generation
   - Append-only log files for auditing

### Content Guidelines
1. **Knowledge Pages**
   - Include metadata header with tags and security level
   - Start with clear definition/purpose
   - Use consistent headings hierarchy
   - Include related links section

2. **Task Pages**
   - Include current status and owner
   - Link to related resources and dependencies
   - Document progress with dated entries
   - Include acceptance criteria

3. **Documentation**
   - Use templates for consistency
   - Include examples where helpful
   - Link to source code when relevant

## Execution Framework

### Command Structure
```bash
# Task management
./scripts/task [action] [identifier] [options]

# Project management
./scripts/project [action] [identifier] [options]

# System operations
./scripts/system [action] [component] [options]

# Report generation
./scripts/report [type] [period] [options]
```

### Automation Triggers
1. **Time-Based**
   - Daily tasks run at 00:01 UTC
   - Weekly reports generate Sunday 23:00 UTC
   - Monthly reviews trigger 1st of month 06:00 UTC

2. **Event-Based**
   - New task creation
   - Status changes
   - System alerts

3. **User-Initiated**
   - Manual report generation
   - Ad-hoc analyses
   - System control operations

### Integration Hooks
1. **Pre/Post Execution**
   - Pre-execution validation
   - Post-execution notifications
   - Error handling protocols

2. **Logging Requirements**
   - All executions must log start/end timestamps
   - Include parameters and outcome
   - Record resource utilization

3. **Security Constraints**
   - Command execution requires appropriate permissions
   - Sensitive operations require verification
   - All actions are logged for audit purposes
